{"version":3,"sources":["context.js","components/showTemp.js","components/navbar.js","components/showDate.js","components/showTime.js","components/forecast.js","components/showForecast.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","API_KEY","reducer","state","action","type","Object","objectSpread","showForecast","payload","Provider","city","country","current_temp","list","dispatch","_this","setState","fetch","concat","res","json","data","this","name","sys","main","temp","Promise","all","getOnlyWeather","getDetailsForecast","getWeather","react_default","a","createElement","value","props","children","Component","Consumer","ShowTemp","toggleForecast","_this2","className","onClick","Navbar","ShowDate","date","month","year","getDate","today","Date","dd","yyyy","getFullYear","getMonth","_this$state","ShowTime","hour","minute","ampm","getTime","time","hh","getHours","mm","getMinutes","style","paddingRight","textTransform","Forecast","eachList","dt_txt","ShowForecast","react_motion","defaultStyle","x","opacity","spring","transform","slice","map","i","forecast","key","App","context_Provider","components_navbar","src","alt","components_showTemp","components_showDate","components_showTime","src_components_showForecast","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff3a0bb3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Context = React.createContext();\r\nconst API_KEY = \"abacd002734db40c2a0707492fb41afc\";\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === \"TOGGLE_FORECAST\") {\r\n    return {\r\n      ...state,\r\n      showForecast: action.payload\r\n    };\r\n  }\r\n};\r\n\r\nexport default class Provider extends Component {\r\n  state = {\r\n    city: \"\",\r\n    country: \"\",\r\n    current_temp: null,\r\n    list: [],\r\n    showForecast: false,\r\n    dispatch: action => this.setState(state => reducer(state, action))\r\n  };\r\n\r\n  async getOnlyWeather() {\r\n    const res = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=sylhet,bangladesh&appid=${API_KEY}&units=metric`\r\n    );\r\n    const data = await res.json();\r\n    this.setState({\r\n      city: data.name,\r\n      country: data.sys.country,\r\n      current_temp: data.main.temp\r\n    });\r\n  }\r\n\r\n  async getDetailsForecast() {\r\n    const res = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/forecast?q=sylhet,bangladesh&appid=${API_KEY}&units=metric`\r\n    );\r\n    const data = await res.json();\r\n    this.setState({\r\n      list: data.list\r\n    });\r\n  }\r\n\r\n  async getWeather() {\r\n    await Promise.all([this.getOnlyWeather(), this.getDetailsForecast()]);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getWeather();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React from \"react\";\r\nimport { Consumer } from \"../context\";\r\nimport \"./showTemp.css\";\r\n\r\nclass ShowTemp extends React.Component {\r\n  toggleForecast = (showForecast, dispatch) => {\r\n    showForecast = !showForecast;\r\n    dispatch({\r\n      type: \"TOGGLE_FORECAST\",\r\n      payload: showForecast\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { current_temp, city, showForecast, dispatch } = value;\r\n          return (\r\n            <div\r\n              className=\"show_temp\"\r\n              onClick={() => this.toggleForecast(showForecast, dispatch)}\r\n            >\r\n              <h2>\r\n                {current_temp}\r\n                <span>&#x2103;</span>\r\n              </h2>\r\n              <p>{city}</p>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default ShowTemp;\r\n","import React from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst Navbar = () => (\r\n  <nav className=\"Syl-navbar\">\r\n    <h1>\r\n      <i className=\"fas fa-home\" /> Sylhet Weather App\r\n    </h1>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./showDate.css\";\r\n\r\nclass ShowDate extends Component {\r\n  state = {\r\n    date: null,\r\n    month: null,\r\n    year: null\r\n  };\r\n  getDate = () => {\r\n    var today = new Date();\r\n    var dd = today.getDate();\r\n    var yyyy = today.getFullYear();\r\n    const monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n\r\n    if (dd < 10) {\r\n      dd = \"0\" + dd;\r\n    }\r\n\r\n    this.setState({\r\n      date: dd,\r\n      month: monthNames[today.getMonth()],\r\n      year: yyyy\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getDate();\r\n  }\r\n  render() {\r\n    const { date, month, year } = this.state;\r\n    return (\r\n      <div className=\"show-date\">\r\n        <div className=\"date\">\r\n          <h2>\r\n            {date}\r\n            <span>'th</span>\r\n          </h2>\r\n          <p>\r\n            {month}, {year}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowDate;\r\n","import React, { Component } from \"react\";\r\nimport \"./showTime.css\";\r\n\r\nclass ShowTime extends Component {\r\n  state = {\r\n    hour: null,\r\n    minute: null,\r\n    ampm: \"\"\r\n  };\r\n  componentWillMount() {\r\n    this.getTime();\r\n  }\r\n  getTime = () => {\r\n    let time = new Date();\r\n\r\n    let hh = time.getHours();\r\n    let mm = time.getMinutes();\r\n    let ampm = hh >= 12 ? \"pm\" : \"am\";\r\n\r\n    this.setState({\r\n      hour: hh,\r\n      minute: mm,\r\n      ampm: ampm\r\n    });\r\n  };\r\n  render() {\r\n    const { hour, minute, ampm } = this.state;\r\n    return (\r\n      <div className=\"show-time\">\r\n        <div className=\"time\">\r\n          <h2 style={{ paddingRight: \"25px\" }}>\r\n            {hour}:{minute}\r\n          </h2>\r\n          <p style={{ textTransform: \"uppercase\", paddingRight: \"25px\" }}>\r\n            {ampm}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowTime;\r\n","import React from \"react\";\r\n\r\nconst Forecast = props => {\r\n  return (\r\n    <div className=\"forecast\">\r\n      <h2>{props.eachList.main.temp}<span>&#x2103;</span></h2>\r\n      <p>{props.eachList.dt_txt}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React, { Component } from \"react\";\r\nimport { Motion, spring } from \"react-motion\";\r\nimport { Consumer } from \"../context\";\r\nimport Forecast from \"./forecast\";\r\nimport \"./showForecast.css\";\r\n\r\nclass ShowForecast extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { list, showForecast } = value;\r\n          return (\r\n            <Motion\r\n              defaultStyle={{ x: -200, opacity: 0 }}\r\n              style={{\r\n                x: spring(showForecast ? 0 : -200),\r\n                opacity: spring(showForecast ? 1 : 0)\r\n              }}\r\n            >\r\n              {style => (\r\n                <div\r\n                  style={{\r\n                    transform: `translateX(${style.x}px)`,\r\n                    opacity: style.opacity\r\n                  }}\r\n                  className=\"show_forecast\"\r\n                >\r\n                  {list.slice(0, 10).map((eachList, i) => {\r\n                    return <Forecast eachList={eachList} key={i} />;\r\n                  })}\r\n                </div>\r\n              )}\r\n            </Motion>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowForecast;\r\n","import React, { Component } from \"react\";\r\nimport Provider from \"./context\";\r\nimport ShowTemp from \"./components/showTemp\";\r\nimport Navbar from \"./components/navbar\";\r\nimport ShowDate from \"./components/showDate\";\r\nimport ShowTime from \"./components/showTime\";\r\nimport \"./App.css\";\r\nimport ShowForecast from \"./components/showForecast\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider>\r\n        <Navbar />\r\n        <div className=\"container\">\r\n          <img\r\n            className=\"bg\"\r\n            src={\r\n              \"https://upload.wikimedia.org/wikipedia/commons/6/6b/Tea_Garden_in_Malini_chora_Sylhet_Bangladesh_%283%29.JPG\"\r\n            }\r\n            alt=\"\"\r\n          />\r\n          <div className=\"bottom-right\">\r\n            <ShowTemp />\r\n          </div>\r\n          <div className=\"bottom-right-date\">\r\n            <ShowDate />\r\n          </div>\r\n          <div className=\"bottom-right-time\">\r\n            <ShowTime />\r\n          </div>\r\n          <div className=\"top-left-forecast\">\r\n            <ShowForecast />\r\n          </div>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}